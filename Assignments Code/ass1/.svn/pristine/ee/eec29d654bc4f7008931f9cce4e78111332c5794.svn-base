package stops;

import exceptions.NoNameException;
import passengers.Passenger;
import routes.Route;
import vehicles.PublicTransport;

import java.util.List;
import java.util.Objects;

/**
 * Represents a stop in the transportation network.
 * <p>Stops are where public transport vehicles collect and drop off passengers,
 * and are located along one or more routes.</p>
 */
public class Stop {
    private String name;
    private int x;
    private int y;
    private List<Route> routes;
    private List<Stop> neighbours;
    private List<Passenger> waitingPassengers;
    private List<PublicTransport> vehicles;

    /**
     * Remove the newline characters ('\n') or carriage returns ('\r') from the given name.
     * @param name the given name of object
     * @return the name of object without newline characters or carriage returns
     */
    public static String removeLineBreaks(String name) {
        String newName = name.replaceAll("\\r\\n|\\r|\\n"," ");
        return newName;
    }

//    /**
//     * Creates a new Stop object without params.
//     */
//    public Stop() {}

    /**
     * Creates a new Stop object with the given name and coordinates.
     * <p>A stop should be created with no passengers, routes, or vehicles.
     * If the given name contains any newline characters ('\n') or carriage returns ('\r'),
     * they should be removed from the string before it is stored.</p>
     * @param name The name of the stop being created.
     * @param x The x coordinate of the stop being created.
     * @param y The y coordinate of the stop being created.
     */
    public Stop(String name, int x, int y) {
        if ( Objects.isNull(name) || name.isEmpty() ) {
            throw new NoNameException();
        } else {
            this.name = removeLineBreaks(name);
//        this.name = Passenger.normalizeName(name);
            this.x = x;
            this.y = y;
        }
    }

    /**
     * Returns the name of this stop.
     * @return The name of the stop.
     */
    public String getName() {
        return name;
    }

    /**
     * Returns the x-coordinate of this stop.
     * @return The x-coordinate of the stop.
     */
    public int getX() {
        return x;
    }

    /**
     * Returns the y-coordinate of this stop.
     * @return The y-coordinate of the stop.
     */
    public int getY() {
        return y;
    }

    /**
     * Records that this stop is part of the given route.
     * If the given route is null, it should not be added to the stop.
     * @param route The route to be added.
     */
    public void addRoute(Route route) {
        //add the stop name to the route
        //if(route!=null){}
    }

    /**
     * Returns the routes associated with this stop.
     * <p>No specific order is required for the route objects in the returned list.
     * Modifying the returned list should not result in changes to the internal
     * state of the class.</p>
     * @return The routes which go past the stop.
     */
    public List<Route> getRoutes() {
        return routes;
    }

    /**
     * Records the given stop as being a neighbour of this stop.
     * <p>If the given stop is null, or if this stop is already recorded as a neighbour,
     * it should not be added as a neighbour, and the method should return early.</p>
     * @param neighbour The stop to add as a neighbour.
     */
    public void addNeighbouringStop(Stop neighbour) {
    }

    /**
     * Returns all of the stops adjacent to this one on any routes.
     * <p>No specific order is required for the stop objects in the returned list.
     * Modifying the returned list should not result in changes to the internal state of the class.</p>
     * @return The neighbours of this stop.
     */
    public List<Stop> getNeighbours() {
        return neighbours;
    }

    /**
     * Places a passenger at this stop.
     * If the given passenger is null, it should not be added to the stop.
     * @param passenger The passenger to add to the stop.
     */
    public void addPassenger(Passenger passenger) {
        //if (passenger != null) {}
    }

    /**
     * Returns the passengers currently at this stop.
     * <p>The order of the passengers in the returned list should be the same as
     * the order in which the passengers were added to the stop.
     * Modifying the returned list should not result in changes to the internal state of the class.</p>
     * @return The passengers currently waiting at the stop.
     */
    public List<Passenger> getWaitingPassengers() {
        return waitingPassengers;
    }

    /**
     * Checks whether the given public transport vehicle is at this stop or not.
     * @param transport The transport vehicle to check for.
     * @return True if the vehicle is at this stop, false otherwise.
     */
    public boolean isAtStop(PublicTransport transport) {
        return true;
    }

    /**
     * Returns the vehicles currently at this stop.
     * <p>No specific order is required for the public transport objects in the returned list.
     * Modifying the returned list should not result in changes to the internal state of the class.</p>
     * @return The vehicles currently at the stop.
     */
    public List<PublicTransport> getVehicles() {
        return vehicles;
    }

    /**
     * Records a public transport vehicle arriving at this stop. There is no limit on
     * the number of vehicles that can be at a stop simultaneously.
     *
     * <p>If the given vehicle is already at this stop, or if the vehicle is null, do nothing.
     * Otherwise, unload all of the passengers on the arriving vehicle(using
     * {@link PublicTransport#unload()}),and place them at this stop, as well as recording the
     * vehicle itself at this stop.
     *
     * This method does not need to check whether this stop is on the given transport's route,
     * or whether the transport's route is a route of this stop, and should also not update
     * the location of the transport.</p>
     * @param transport The public transport vehicle arriving at this stop.
     */
    public void transportArrive(PublicTransport transport) {

    }

    /**
     * Records a public transport vehicle departing this stop and travelling to a new stop.
     *<p>This method should also update the vehicle's location to be the next stop (using
     * {@link PublicTransport#travelTo(Stop)}).
     * If the given vehicle is not at this stop, or if the vehicle is null, or if the next
     * stop is null, do nothing.</p>
     * @param transport The transport currently leaving this stop.
     * @param nextStop The new stop that the transport is travelling to.
     */
    public void transportDepart(PublicTransport transport, Stop nextStop) {

    }

    /**
     * Returns the Manhattan distance between this stop and the given other stop.
     * <p>Manhattan distance between two points, for example (x1, y1) and (x2, y2),
     * is calculated using the following formula:
     * abs(x1 - x2) + abs(y1 - y2)
     * where abs is a method that calculates the absolute value of a number.</p>
     * @param stop The stop to calculate the Manhattan distance to.
     * @return The Manhattan distance between this stop and the given stop
     *          (or -1 if the given stop is null)
     */
    public int distanceTo(Stop stop) {
        return 10;
    }

    @Override
    public int hashCode() {
        return name.hashCode();
    }
    //if(x==x&&y==y&&routes==routes)return.name.hashcode
    //if()没有办法做比较，因为没有参数传入
    //else return this.hashcode

    /**
     * Compares this stop to the other object for equality.
     *
     * <p>Two stops are considered equal if they have the same name, x-coordinate,
     * y-coordinate, and routes. Routes may be in any order, as long as all of
     * this stop's routes are also associated with the other stop, and vice versa.
     * Duplicates of routes do not need to be considered in determining equality
     * (that is, if this stop has routes R1 and R2, and other has routes R1, R2, and
     * R1 again, their routes can still be considered equal, ignoring duplicates).</p>
     * @param other the other object to compare for equality.
     * @return True if the objects are equal (as defined above), false otherwise
     *          (including if other is null or not an instance of the Stop class.
     */
    @Override
    public boolean equals(Object other) {
        return super.equals(other);
    }

    /**
     * Creates a string representation of a stop in the format:
     * '{name}:{x}:{y}'
     * <p>without the surrounding quotes, and where {name} is replaced
     * by the name of the stop, {x} is replaced by the x-coordinate of
     * the stop, and {y} is replaced by the y-coordinate of the stop.</p>
     * @return A string representation of the stop.
     */
    @Override
    public String toString() {
        return "{" + getName() + "} : {" + getX() + "} : {" + getY() + "}";
    }
}
