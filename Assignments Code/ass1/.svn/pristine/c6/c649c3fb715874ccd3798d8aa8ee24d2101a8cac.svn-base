package passengers;

import stops.Stop;

import java.util.Objects;

/**
 * A base passenger in the transport network.
 */
public class Passenger {
    protected String name;
    protected Stop destination;
    /**
     * Construct a new base passenger without params.
     */
    public Passenger() {
    }

    /**
     * Construct a new base passenger with the given name, and without a destination.
     * <p>
     * If the given name is null, an empty string should be stored instead.
     *
     * If the given name contains any newline characters ('\n') or carriage returns ('\r'),
     * they should be removed from the string before it is stored.
     * </p>
     * @param name the name of the passenger
     */
    public Passenger(String name) {
        this.name = normalizeName(name);
    }

    /**
     * Construct a new base passenger with the given name and destination.
     * <p>
     * Should meet the specification of {@link Passenger(String)}, as well as
     * storing the given destination stop
     * </p>
     * @param name the name of the passenger
     * @param destination the destination of the passenger
     */
    public Passenger(String name, Stop destination) {
        this.name = normalizeName(name);
        this.destination = destination;
    }

    /**
     * Remove the newline characters ('\n') or carriage returns ('\r') from the given name.
     * @param name the given name of object
     * @return the name of object without newline characters or carriage returns
     */
    public static String normalizeName(String name) {
        if ( Objects.isNull ( name ) ) {
            return "";
        } else {
            String newName = name.replaceAll("\\r\\n|\\r|\\n"," ");
            return newName;
        }
    }

    /**
     * Returns the name of the passenger.
     * @return the name of the passenger
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the destination of the passenger.
     * @return the intended destination of the passenger,
     * or null if the passenger has no destination.
     */
    public Stop getDestination() {
        return destination;
    }

    /**
     * Sets the destination of the passenger.
     * <p>
     * A value of null for the given stop simply
     * indicates that the passenger has no destination.</p>
     * @param destination The intended destination of the passenger,
     *                    or null if the passenger has no destination.
     */
    public void setDestination(Stop destination) {
        this.destination = destination;
//        if( Objects.isNull ( destination ) ) { //看Stop类 destination的参数，可能会用 str.isEmpty()
//            this.destination = null;
//        } else {
//            this.destination = destination;
//        }
    }

//    /**
//     * Sets the destination of the passenger.
//     * <p>
//     * The intended destination of the passenger is null
//     * if the passenger has no destination.</p>
//     */
//    public void setDestination() {
//        this.destination = null;
//    }

    /**
     * Creates a string representation of the passenger in the format:
     * 'Passenger named {name}'
     * <p>
     * without surrounding quotes and with {name} replaced by the name of the passenger
     * instance. For example:
     * Passenger named Agatha
     *
     * If the passenger's name is empty, the method should instead return the following:
     * Anonymous passenger
     * </p>
     * @return A string representation of the passenger.
     */
    @Override
    public String toString() {
        String s = getName();
        if (s.equals("")) {
            return "Anonymous passenger";
        }
        return "Passenger named "+ s;
    }

//    public static void main(String[] args) {
//        Passenger png = new Passenger("Agatha");
//        System.out.println(png);
//    }
}
