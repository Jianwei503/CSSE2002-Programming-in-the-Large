package vehicles;

import exceptions.OverCapacityException;
import passengers.Passenger;
import routes.Route;
import stops.Stop;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A base public transport vehicle in the transportation network.
 */
public abstract class PublicTransport {
    protected int id;
    protected int capacity;
    protected Route route;
    protected String type;
    //Construct a new empty List for holding passengers.
    protected List<Passenger> passengers = new ArrayList<>();
    protected Stop currentStop;

    /**
     * Creates a new public transport vehicle without params.
     */
    public PublicTransport() {
    }

    /**
     * Creates a new public transport vehicle with the given id, capacity, and route.
     * <p>
     * The vehicle should initially have no passengers on board, and should be placed
     * at the beginning of the given route (given by {@link Route#getStartStop()}).
     * If the route is empty, the current location should be stored as null.
     *
     * If the given capacity is negative, 0 should be stored as the capacity instead
     * (meaning no passengers will be allowed on board this vehicle).
     * </p>
     * @param id The identifying number of the vehicle.
     * @param capacity The maximum number of passengers allowed on board.
     * @param route The route the vehicle follows. Note that the given route should
     *              never be null (@require route != null), and thus will not be
     *              tested with a null value.
     */
    public PublicTransport(int id, int capacity, Route route ) {
        this.id = id;
        this.route = route;
        this.capacity = capacity < 0 ? 0 : capacity;
        //If route is not empty, place vehicle at the start stop of the route,
        //otherwise set the currentStop as default(null).
        if ( !route.getStopsOnRoute().isEmpty() ) {
            this.currentStop = route.getStartStop();
        }
        this.type = route.getType();
    }

    /**
     * Returns the route this vehicle is on.
     * @return The route this vehicle is on.
     */
    public Route getRoute() {
        return route;
    }

    /**
     * Returns the id of this transport.
     * @return The id of this transport.
     */
    public int getId() {
        return id;
    }

    /**
     * Returns the current location of this vehicle.
     * @return The stop this vehicle is currently located at, or null if it is
     * not currently located at a stop.
     */
    public Stop getCurrentStop() {
       return currentStop;
    }

    /**
     * Returns the number of passengers currently on board this vehicle.
     * @return The number of passengers in the vehicle.
     */
    public int passengerCount() {
        return this.passengers.size();
    }

    /**
     * Returns the maximum number of passengers allowed on this vehicle.
     * @return The maximum capacity of the vehicle.
     */
    public int getCapacity() {
        return capacity;
    }

    /**
     * Returns the type of this vehicle, as determined by the type of the route it
     * is on (i.e. The type returned by {@link Route#getType()}).
     * @return The type of this vehicle.
     */
    public String getType() {
        return type;
    }

    /**
     * Returns the passengers currently on-board this vehicle.
     * <p>
     * No specific order is required for the passenger objects in the returned list.
     *
     * Modifying the returned list should not result in changes to the internal state
     * of the class.</P>
     * @return The passengers currently on the public transport vehicle.
     */
    public List<Passenger> getPassengers() {
        return Stop.deepCopy(this.passengers);
    }

    /**
     * Adds the given passenger to this vehicle.
     * <p>
     *If the passenger is null, the method should return without adding it to the vehicle.
     *
     * If the vehicle is already at (or over) capacity, an exception should be thrown and
     * the passenger should not be added to the vehicle.
     * </p>
     * @param passenger The passenger boarding the vehicle.
     * @throws OverCapacityException If the vehicle is already at (or over) capacity.
     */
    public void addPassenger(Passenger passenger) throws OverCapacityException {
        if ( Objects.isNull( passenger ) ) {
            return;
        } else if (this.passengerCount() >= this.getCapacity()) {
            //OverCapacityException thrown when a Passenger is added to
            // a PublicTransport which has reached capacity.
            throw new OverCapacityException();
        } else {
            this.passengers.add(passenger);
        }
    }

    /**
     * Removes the given passenger from the vehicle.
     * <p>If the passenger is null, or is not on board the vehicle, the method should
     * return false, and should not have any effect on the passengers currently on the
     * vehicle.</p>
     * @param passenger The passenger disembarking the vehicle.
     * @return True if the passenger was successfully removed, false otherwise
     * (including the case where the given passenger was not on board the vehicle
     * to begin with).
     */
    public boolean removePassenger(Passenger passenger) {
        if ( Objects.nonNull( passenger ) && this.passengers.contains(passenger) ) {
            return this.passengers.remove(passenger);
        } else {
            return false;
        }
    }

    /**
     * Empties the vehicle of all its current passengers, and returns all the
     * passengers who were removed.
     * <p>
     * No specific order is required for the passenger objects in the returned list.
     *
     * If there are no passengers currently on the vehicle, the method just returns an empty list.
     *
     * Modifying the returned list should not result in changes to the internal state of the class.
     * </p>
     * @return The passengers who used to be on the bus.
     */
    public List<Passenger> unload() {
        if (this.passengers.isEmpty()) {
            return new ArrayList<Passenger>();
        } else {
            List<Passenger> passengers = Stop.deepCopy(this.passengers);
            this.passengers.clear();
            return passengers;
        }
    }

    /**
     * Updates the current location of the vehicle to be the given stop.
     * <p>
     * If the given stop is null, or is not on this public transport's route
     * the current location should remain unchanged.
     * </p>
     * @param stop The stop the vehicle has travelled to.
     */
    public void travelTo(Stop stop) {
        if ( Objects.nonNull( stop ) && this.route.getStopsOnRoute().contains(stop)) {
            this.currentStop = stop;
        }
    }

    /**
     * Creates a string representation of a public transport vehicle in the format:
     * '{type} number {id} ({capacity}) on route {route}'
     * <p>
     * without the surrounding quotes, and where {type} is replaced by the type of
     * the vehicle, {id} is replaced by the id of the vehicle, {capacity} is replaced
     * by the maximum capacity of the vehicle, and {route} is replaced by the route
     * number of the route the vehicle is on. For example:
     *
     * bus number 1 (30) on route 1
     * </p>
     * @return A string representation of the vehicle.
     */
    @Override
    public String toString() {
        return type + " number " +
                id + " (" +
                capacity + ") on route " +
                route.getRouteNumber();
    }
}
